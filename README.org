#+options: toc:t
* Utilities for password handling, named objects, alist as db...

The package contains utilities that I needed in multiple projects that
- I did not find in public repositories and
- are so small that they do not deserve separate package/repository

Not cleaned up and tested, so probably will not work for you as-is.

** Named objects
#+BEGIN: lisp-fns-doc :section tz-utilities::@named-objects :package tz-utilities
Class NAMED streamlines creating "printable" named class instances.

Class NAMED-JSON allows easier handling and pretty-printing of alist
objects. Word JSON in name is probably a bad one, but this is what I use it for:
alists obtained from cl-json:decode-json calls

- =NAMED= (class)
   Use as a mixin/base class to ensure that the class has slot NAME. This slot is
   used to pretty-print the objects.

     Superclasses: (STANDARD-OBJECT)

- =GET-NAME= (generic-fn)
   Name of the object. If it is named object, value of the NAME slot, otherwise
   object itself (suitable for strings, numbers, etc.)

   Lambda list: (OBJECT)

- =NO-NAME= (condition)
   Condition thrown when an object of class NAMED has no NAME specified at
   creation.

- =NAMED-JSON= (class)
   Objects backed up/created from an alist structure (e.g., decoded json) that
   contains, among other, name/display name of the object.

     Superclasses: (NAMED)

- =MAKE-JSON-OBJECT= (function)
   Make instance of an object backed by an alist. Typically, sets name based on
   the value associated with NAME-KEYWORD, but another function to extract name can
   be specified with NAMED-FN.

   Lambda list: (JSON CLASS &KEY (NAME-KEYWORD :NAME)
                 (NAME-FN (ASSOCD-FOR NAME-KEYWORD)))


#+END:

** Password retrieval
#+BEGIN: lisp-fns-doc :section tz-utilities::@authinfo :package tz-utilities
Utilities to retrieve passwords from safer storage.

The idea is not to have passwords (and possibly relared configuration objects -
names, etc) in the code, but elsewhere, and ask for them when needed in a simple way.

Two backends are in place: authinfo files, and secret service API.

- =GET-AUTHINFO= (function)
   Get secret for machine MACHINE and login USERNAME.

   Store already found secrets in a cache and try to retrieve from cache before
   other storate is tried.

   Raise condition SECRET-NOT-FOUND if relevant secret is not found; it has established restart USE-VALUE

   Lambda list: MACHINE USERNAME

- =GET-AUTHINFO-BOTH= (function)
   Get user and secret for MACHINE.

   Store already found secrets in a cache and try to retrieve from cache before
   other storate is tried.

   Lambda list: MACHINE

- =*AUTHINFO-FILE*= (variable)
   Authinfo file to search secrets in.

- =SECRET-NOT-FOUND= (condition)
   Condition thrown when no relevant secret is found.


#+END:

** Alists as a DB

#+BEGIN: lisp-fns-doc :section tz-utilities::@alist-utilities :package tz-utilities
Add-hoc utilities for alist management.

Three operations on alists when they are used as key-value DB need to be defined:
- getting the value for key or nil (assocd),
- updating value for the key, unconditionally (update-alist)
- getting the value and updating it if it does not exist (get-or-update-alist)

- =ASSOCD= (function)
   Convenience shortcut for (cdr (assoc ...)), also known as alist-get in elisp.
   FIXME: this must be in some standard library, but I can't find it.

   Lambda list: ITEM ALIST &REST PARS

- =ASSOCD-FOR= (function)
   Function of one parameter (an alist) that extracts KEY from that alist

   Lambda list: KEY &REST PARS

- =CLIST-TO-LLIST= (function)
   Convert list of conses (e.g., used by hunchentoot) to list of lists
     (e.g., used for display in org mode).

   Lambda list: OBJECT

- =GET-OR-UPDATE-ALIST= (function)
   Get value associated with KEY in the ALIST; if it is not present,
   update ALIST with KEY and evaluate NEW-VAL-CODE as new VALUE.

   Lambda list: (ALIST KEY &REST ASSOC-PARS &KEY
                 &ALLOW-OTHER-KEYS) &BODY NEW-VAL-CODE

- =WITH-SMALL-CACHE= (macro)
   Return body, or it cached value. Caching is done on current and
   cached KEYs being same; keyword parameters KEY and TEST can modify
   what same means.

   The cache is implemented as an alist, so should be small to keep efficiency.

   Lambda list: (KEY &REST PARS-TEST) &BODY BODY

- =PRUNE-ALIST= (function)
   Remove duplicate entries from an alist.

   Lambda list: ALIST TEST

- =UPDATE-ALIST= (modify-macro)
   Set value for KEY in modified alist to NEW-VALUE

   Lambda list: #:PLACE KEY NEW-VALUE &REST TEST-PARS


#+END:

** Random stuff
#+BEGIN: lisp-fns-doc :section tz-utilities::@anaphoric :package tz-utilities
Anaphoric macros not defined in the lol package

- =AWHEN= (function)
   Evaluate TEST-FORM, and if true, evaluate BODY with symbol IT bound to its
   value.

   Lambda list: TEST-FORM &BODY BODY


#+END:

#+BEGIN: lisp-fns-doc :section tz-utilities::@debugger-hooks :package tz-utilities
MAKE-CASCADED-DEBUGGER-HOOK is used to add additional handler cases for current repl.

This is probably not good idea to use and fully experimental.

- =MAKE-CASCADED-DEBUGGER-HOOK= (function)
   A function suitable for the debugger hook that checks CASES (same format as in
    handler-case) and if none matches, runs whatever was the hook when it was called.

   Usage:
   : (setq *debugger-hook*
   :    (make-cascaded-debugger-hook '((simple-error continue)))))

   Lambda list: CASES


#+END:


** Cached variables
#+BEGIN: lisp-fns-doc :section tz-utilities::@cached-vars :package tz-utilities
To prevent long loading times, allow variables to be initialized dynamically -
the initialing form is stored at load time, and evaluated when the form is
used.

The "variable" symbol is expanded to a form "(read-cached symbol)".

Not that the illusion of VAR being really variable breaks when it is used in a
LET form. This turns out to be quite a serious problem.

- =DEFINE-CACHED-VAR= (macro)
   Define NAME as a symbol that is evaluated to VALUE first time it is used.

   Lambda list: NAME VALUE &OPTIONAL COMMENT

- =FORGET-CACHED= (function)

   Lambda list: VISIBLE-NAME


#+END:

** Persistent storage for variables
#+BEGIN: lisp-fns-doc :section tz-utilities::@save-load :package tz-utilities
To preserve relatively stable data across run of the system, the
actual values of the variables can be saved and then loaded on
startup (or anytime else).

The data are saved to a define directory with names created from the
provided string and timestamp; loading is done from the most recent
(based on name) file.

The background mechanism for storing is cl-store.

Typical sequence is

: (defvar *A-VARIABLE* (load-value "foo"))
...
: ;;; some long calculation to update *A-VARIABLE*
...
: (save-value *A-VARIABLE* "foo")

- =SAVE-VALUE= (function)
   Store value to a timestamped storage in cache.

   Lambda list: VALUE BASE-NAME &KEY (CACHE-PATH *DEFAULT-CACHE-PATH*)

- =LOAD-VALUE= (function)
   Load value keyed by BASE-NAME from the most recent file (by name) in cache.

   Lambda list: BASE-NAME &KEY (CACHE-PATH *DEFAULT-CACHE-PATH*)

- =*DEFAULT-CACHE-PATH*= (variable)
   Default directory to save the variable values.


#+END:
